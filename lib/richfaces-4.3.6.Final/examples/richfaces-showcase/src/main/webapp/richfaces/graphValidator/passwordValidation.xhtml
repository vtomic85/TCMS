<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:h="http://java.sun.com/jsf/html" xmlns:f="http://java.sun.com/jsf/core"
    xmlns:ui="http://java.sun.com/jsf/facelets">

<ui:composition>
    <p>
        <b>rich:graphValidator</b> is a component which allows to perform Object validation. value attribute should be defined
        with the value binding to bean. In the result all the bean properties will be validated during validation phase. That
        allows you to validate all the object properties and not just ones which are submitted with the current request.
    </p>

    <p>
        Simple but probably most common example of such kind of usage is shown below. Below is the simple sample of <b>cross-field
            validation</b>. Passwords getting validated according to constraints for every field and <b>isPasswordEquals</b>
        validation check if them are equals.
    </p>
    <ui:include src="#{demoNavigator.sampleIncludeURI}" />
    <ui:include src="/templates/includes/source-view.xhtml">
        <ui:param name="src" value="#{demoNavigator.sampleIncludeURI}" />
        <ui:param name="sourceType" value="xhtml" />
        <ui:param name="openLabel" value="View Source" />
        <ui:param name="hideLabel" value="Hide Source" />
    </ui:include>
    <ui:include src="/templates/includes/source-view.xhtml">
        <ui:param name="src" value="/WEB-INF/src/org/richfaces/demo/validation/PasswordValidationBean.java" />
        <ui:param name="sourceType" value="java" />
        <ui:param name="openLabel" value="View PasswordValidationBean Source" />
        <ui:param name="hideLabel" value="Hide PasswordValidationBean Source" />
    </ui:include>
</ui:composition>
</html>