<!--
  JBoss, Home of Professional Open Source
  Copyright 2013, Red Hat, Inc. and individual contributors
  by the @authors tag. See the copyright.txt in the distribution for a
  full listing of individual contributors.

  This is free software; you can redistribute it and/or modify it
  under the terms of the GNU Lesser General Public License as
  published by the Free Software Foundation; either version 2.1 of
  the License, or (at your option) any later version.

  This software is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this software; if not, write to the Free
  Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
  02110-1301 USA, or see the FSF site: http://www.fsf.org.
  -->

<ui:composition xmlns="http://www.w3.org/1999/xhtml" xmlns:ui="http://java.sun.com/jsf/facelets"
    xmlns:h="http://java.sun.com/jsf/html" xmlns:f="http://java.sun.com/jsf/core" xmlns:a4j="http://richfaces.org/a4j"
    xmlns:rich="http://richfaces.org/rich">
    <div class="section">
        <div class="titlepage">
            <div>
                <div>
                    <h3 class="title">Navigation tree for a registered user</h3>
                </div>
            </div>
        </div>
        <p>As it was mentioned before a navigation tree for a registered user has two main features: drag-and-drop and
            context menu.</p>
        <p>Drag-and-drop feature supported in the Photo Album application is not so complicated as it may seem from the
            first view. In this application we can mark out two types of drag-and-drop: one type takes place only inside the
            tree (between tree nodes) and another one - between the watching area and the tree. The difference is not
            considerable enough to describe two types separately, but also not at all insignificant to be omitted here.</p>
        <p>
            There are two components that provide drag-and-drop functionality: <span class="bold"><strong><span
                    class="property">&lt;rich:dragSource&gt;</span></strong></span> which takes care of the drag and <span class="bold"><strong><span
                    class="property">&lt;rich:dropTarget&gt;</span></strong></span> which takes care with of the drop operations.
        </p>
        <div xmlns:rf="java:org.jboss.highlight.XhtmlRendererFactory" class="note">
            <h2>Note:</h2>
            <p>Due to "Album Groups - Albums - Photos" hierarchy we can say that photos could be moved between albums, albums
                could be moved between album groups. To avoid a mishmash, it's not allowed to place photos directly in album groups as
                well as nesting album groups inside album groups or albums inside albums.</p>
        </div>
        <p>Let's explore how drag-and-drop works for albums.</p>
        <p>
            All albums, that are represented as TreeNodes, must be marked somehow for dragging. For this purpose we use
            previously mentioned <em><span class="property">&lt;rich:dragSource&gt;</span></em> and specify albums with <em><span
                class="property">"type"</span></em> attribute. Let's have a look at the
            <code class="code">src/main/webapp/includes/index/tree.xhtml</code>
            file:
        </p>
        <pre class="brush: xml, gutter: false, highlight: 4">
            &lt;rich:treeModelAdaptor var=&quot;album&quot; nodes=&quot;#{'#{'}treeNode.albums}&quot;&gt;
              &lt;rich:treeNode … &gt;
                  …
                &lt;rich:dragSource type=&quot;album&quot; dragIndicator=&quot;dragIndicator&quot; dragValue=&quot;#{'#{'}treeNode}&quot; /&gt;
                    …
                &lt;/a4j:outputPanel&gt;
              &lt;/rich:treeNode&gt;
                …
            &lt;/rich:treeModelAdaptor&gt;
        </pre>
        <p>
            To provide drop functionality for the marked albums, we should mark Album Groups as drop zones in the application code
            too. For this purpose we add the <em><span class="property">&lt;rich:dropTarget&gt;</span></em> with <em><span
                class="property">"acceptedTypes"</span></em> attribute to the "Shelf" node and in order to process drop on the server
            side we specify a listener with the <em><span class="property">"dropListener"</span></em> attribute in the same
            <code class="code">src/main/webapp/includes/index/tree.xhtml</code>
            file:
        </p>
        <pre class="brush: xml, gutter: false, highlight: [4,5]">
            &lt;rich:treeModelAdaptor nodes=&quot;#{'#{'}userBean.user.shelves}&quot;&gt;
              &lt;rich:treeNode … &gt;
                  …
                 &lt;rich:dropTarget acceptedTypes=&quot;album&quot; dropValue=&quot;#{'#{'}treeNode}&quot; dropListener=&quot;#{'#{'}dndManager.processDrop}&quot;
                     render=&quot;treePanel, mainArea&quot; /&gt;
                     …
              &lt;/rich:treeNode&gt;
                …
            &lt;/rich:treeModelAdaptor&gt;
        </pre>
        <p>
            The <em><span class="property">"acceptedTypes"</span></em> attribute tells the "Shelf" node what types of dragged
            zones (albums in this case) it can accept. We have specified "Album" node <em><span class="property">"dragType"</span></em>
            as "album", so the "Shelf" node can accept it.
        </p>

        <p>
            The code for the <strong><span class="property">&lt;rich:dragIndicator&gt;</span></strong>
            looks like the following:
        </p>
        <pre class="brush: xml, gutter: false">
            &lt;rich:dragIndicator id=&quot;dragIndicator&quot;&gt;
              &lt;rich:panel&gt;
                [Album]
              &lt;/rich:panel&gt;
            &lt;/rich:dragIndicator&gt;
        </pre>
        <p>
            The
            <code class="code">processDrop()</code>
            method of
            <code class="code">DnDManager.java</code>
            class is shown in the listing below:
        </p>
        <pre class="brush: java, gutter:false">
            public void processDrop(DropEvent dropEvent) {
                if (user == null) return;
  
                Object dragValue = dropEvent.getDragValue();
                Object dropValue = dropEvent.getDropValue();
                if (dragValue instanceof Image) {
                    if (!((Album) dropValue).getOwner().getLogin().equals(user.getLogin())) {
                        error.fire(new SimpleEvent(Constants.DND_PHOTO_ERROR));
                        return;
                    }
                    handleImage((Image) dragValue, (Album) dropValue);
                } else if (dragValue instanceof Album) {
                    if (!((Shelf) dropValue).getOwner().getLogin().equals(user.getLogin())) {
                        error.fire(new SimpleEvent(Constants.DND_ALBUM_ERROR));
                        return;
                    }
                    handleAlbum((Album) dragValue, (Shelf) dropValue);
                }
            }
        </pre>
        <p>Here is the whole example of the "Navigation tree for a registered user":</p>
        <pre class="brush:xml, gutter:false">
            &lt;rich:dragIndicator id=&quot;dragIndicator&quot;&gt;
              &lt;rich:panel&gt;
                [Album]
              &lt;/rich:panel&gt;
            &lt;/rich:dragIndicator&gt;
            &lt;rich:dragIndicator id=&quot;iDragIndicator&quot;&gt;
              &lt;rich:panel&gt;
                  [Image]
              &lt;/rich:panel&gt;
            &lt;/rich:dragIndicator&gt;
            &lt;rich:tree id=&quot;userTree&quot; var=&quot;treeNode&quot; toggleType=&quot;client&quot;&gt;
              &lt;rich:treeModelAdaptor nodes=&quot;#{'#{'}userBean.user.shelves}&quot;&gt;
                &lt;rich:treeNode style=&quot;cursor:pointer&quot; selectedClass=&quot;tree-selected-node&quot;
                    iconExpanded=&quot;/resources/img/shell/tree_icon_shelf.png&quot; iconCollapsed=&quot;/resources/img/shell/tree_icon_shelf.png&quot; id=&quot;shelf&quot;&gt;
                  &lt;ui:include src=&quot;/includes/contextMenu/CMForShelf.xhtml&quot;&gt;
                    &lt;ui:param name=&quot;shelf&quot; value=&quot;#{'#{'}treeNode}&quot; /&gt;
                    &lt;ui:param name=&quot;target&quot; value=&quot;shelf&quot; /&gt;
                  &lt;/ui:include&gt;
                  &lt;a4j:outputPanel layout=&quot;block&quot; style=&quot;cursor:pointer;width:200px; overflow-x:hidden;&quot;&gt;
                    &lt;h:outputText value=&quot;#{'#{'}treeNode.name}&quot; /&gt;
                    &lt;h:outputText rendered=&quot;#{'#{'}fn:length(treeNode.unvisitedImages) &gt; 0}&quot; value=&quot; #{'#{'}messages['delimiter']} &quot; /&gt;
                    &lt;h:outputText rendered=&quot;#{'#{'}fn:length(treeNode.unvisitedImages) &gt; 0}&quot; styleClass=&quot;bold&quot;
                        value=&quot;#{'#{'}fn:length(treeNode.unvisitedImages)}&quot; /&gt;
                    &lt;h:outputText rendered=&quot;#{'#{'}fn:length(treeNode.unvisitedImages) &gt; 0}&quot; value=&quot; #{'#{'}messages['new']}&quot; /&gt;
                    &lt;a4j:ajax render=&quot;treePanel, mainArea&quot; event=&quot;click&quot; listener=&quot;#{'#{'}controller.showShelf(treeNode)}&quot; /&gt;
    
                    &lt;rich:dropTarget acceptedTypes=&quot;album&quot; dropValue=&quot;#{'#{'}treeNode}&quot; dropListener=&quot;#{'#{'}dndManager.processDrop}&quot;
                        render=&quot;treePanel, mainArea&quot; /&gt;
    
                    &lt;rich:tooltip direction=&quot;topRight&quot; showDelay=&quot;1000&quot;&gt;
                      &lt;span style=&quot;white-space: nowrap&quot;&gt;#{'#{'}treeNode.name}&lt;/span&gt;
                    &lt;/rich:tooltip&gt;
                  &lt;/a4j:outputPanel&gt;
                &lt;/rich:treeNode&gt;
    
                &lt;rich:treeModelAdaptor nodes=&quot;#{'#{'}treeNode.albums}&quot;&gt;
                  &lt;rich:treeNode style=&quot;cursor:pointer&quot; render=&quot;mainArea, treePanel&quot; selectedClass=&quot;tree-selected-node&quot;
                      iconLeaf=&quot;resources/img/shell/tree_icon_album.png&quot; id=&quot;album&quot;&gt;
                    &lt;ui:include src=&quot;/includes/contextMenu/CMForAlbum.xhtml&quot;&gt;
                      &lt;ui:param name=&quot;album&quot; value=&quot;#{'#{'}treeNode}&quot; /&gt;
                      &lt;ui:param name=&quot;target&quot; value=&quot;album&quot; /&gt;
                    &lt;/ui:include&gt;
                    &lt;a4j:outputPanel layout=&quot;block&quot; style=&quot;cursor:pointer;width:200px; overflow-x:hidden;&quot;&gt;
                      &lt;h:outputText value=&quot;#{'#{'}treeNode.name}&quot; /&gt;
                      &lt;h:outputText rendered=&quot;#{'#{'}fn:length(treeNode.unvisitedImages) &gt; 0}&quot; value=&quot; #{'#{'}messages['delimiter']} &quot; /&gt;
                      &lt;h:outputText rendered=&quot;#{'#{'}fn:length(treeNode.unvisitedImages) &gt; 0}&quot; styleClass=&quot;bold&quot;
                          value=&quot;#{'#{'}fn:length(treeNode.unvisitedImages)}&quot; /&gt;
                      &lt;h:outputText rendered=&quot;#{'#{'}fn:length(treeNode.unvisitedImages) &gt; 0}&quot; value=&quot; #{'#{'}messages['new']}&quot; /&gt;
                      &lt;a4j:ajax render=&quot;treePanel, mainArea&quot; event=&quot;click&quot; listener=&quot;#{'#{'}controller.showAlbum(treeNode)}&quot; /&gt;
    
                      &lt;rich:dragSource type=&quot;album&quot; dragIndicator=&quot;dragIndicator&quot; dragValue=&quot;#{'#{'}treeNode}&quot; /&gt;
                        &lt;rich:dropTarget acceptedTypes=&quot;image&quot; dropValue=&quot;#{'#{'}treeNode}&quot;
                            dropListener=&quot;#{'#{'}dndManager.processDrop}&quot; render=&quot;treePanel, mainArea&quot; /&gt;
    
                      &lt;rich:tooltip direction=&quot;topRight&quot; showDelay=&quot;1000&quot;&gt;
                        &lt;span style=&quot;white-space: nowrap&quot;&gt; #{'#{'}treeNode.name} &lt;/span&gt;
                      &lt;/rich:tooltip&gt;
                    &lt;/a4j:outputPanel&gt;
                  &lt;/rich:treeNode&gt;
    
                &lt;/rich:treeModelAdaptor&gt;
              &lt;/rich:treeModelAdaptor&gt;
    
            &lt;/rich:tree&gt;  
        </pre>
        <p>The image below shows how the described above drag-and-drop features are rendered in the Photo Album.</p>
        <div class="figure">
            <div class="figure-contents">
                <div class="mediaobject">
                    <img src="resources/img/help/dnd.png" alt="" />
                </div>
            </div>

        </div>
        <br class="figure-break" />
        <p>Visit following pages at RichFaces Showcase for more information, examples and sources on the components used in
            the application and described in this chapter:</p>
        <div class="itemizedlist">
            <ul>
                <li>
                    <p>
                        <a target="_blank" xmlns:xlink="http://www.w3.org/1999/xlink"
                            href="http://showcase.richfaces.org/richfaces/component-sample.jsf?demo=tree">Tree</a> for the <span
                            class="bold"><strong><span class="property">&lt;rich:tree&gt;</span></strong></span> component;
                    </p>
                </li>
                <li>
                    <p>
                        <a target="_blank" xmlns:xlink="http://www.w3.org/1999/xlink"
                            href="http://showcase.richfaces.org/richfaces/component-sample.jsf?demo=dragDrop">Drag and Drop</a>
                        for the <strong><span class="property">&lt;rich:dragSource&gt;</span></strong>
                        and <strong><span class="property">&lt;rich:dropTarget&gt;</span></strong>
                        components;
                    </p>
                </li>
            </ul>
        </div>
    </div>
</ui:composition>