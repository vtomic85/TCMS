<!--
  JBoss, Home of Professional Open Source
  Copyright 2013, Red Hat, Inc. and individual contributors
  by the @authors tag. See the copyright.txt in the distribution for a
  full listing of individual contributors.

  This is free software; you can redistribute it and/or modify it
  under the terms of the GNU Lesser General Public License as
  published by the Free Software Foundation; either version 2.1 of
  the License, or (at your option) any later version.

  This software is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this software; if not, write to the Free
  Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
  02110-1301 USA, or see the FSF site: http://www.fsf.org.
  -->

<ui:composition xmlns="http://www.w3.org/1999/xhtml" xmlns:ui="http://java.sun.com/jsf/facelets"
    xmlns:h="http://java.sun.com/jsf/html" xmlns:f="http://java.sun.com/jsf/core" xmlns:a4j="http://richfaces.org/a4j"
    xmlns:rich="http://richfaces.org/rich">

    <div class="section" lang="en-US">
        <div class="titlepage">
            <div>
                <div>
                    <h2 class="title">Upload Images</h2>
                </div>
            </div>
        </div>
        <p>In the previous chapter we have discussed how to create Navigation Trees that represent "Album Groups - Albums"
            hierarchy. Now it is time to upload images.</p>
        <p>
            The <strong><span class="property">&lt;rich:fileUpload&gt;</span></strong> component in
            the Photo Album application uses the embedded Flash module that adds extra functionality to the component:
        </p>
        <div class="itemizedlist">
            <ul>
                <li>
                    <p>Multiple files choosing;</p>
                </li>
                <li>
                    <p>Definition of permitted file types in the "Open File" dialog window;</p>
                </li>
                <li>
                    <p>A number of additional client side object properties.</p>
                </li>
            </ul>
        </div>
        <p>
            The code for the <strong><span class="property">&lt;rich:fileUpload&gt;</span></strong> is
            contained in the "/includes/fileUpload/fileUploader.xhtml" page:
        </p>
        <pre class="brush: xml, gutter: false, highlight: [3,6]">
                    …
                &lt;rich:fileUpload maxFilesQuantity=&quot;100&quot;
                    fileUploadListener=&quot;#{'#{'}fileUploadManager.listener}&quot;
                    id=&quot;fileUpload&quot;
                    disabled=&quot;#{'#{'}model.selectedAlbum == null}&quot;
                    acceptedTypes=&quot;jpg,jpeg&quot;
                    execute=&quot;uploadAlbum&quot;&gt;
                    &lt;a4j:ajax event=&quot;uploadcomplete&quot; render=&quot;treePanel, filesPanel&quot; listener=&quot;#{'#{'}fileWrapper.setComplete(true)}&quot;
                        limitRender=&quot;true&quot; /&gt;
                &lt;/rich:fileUpload&gt;
                    …
        </pre>
        <p>
            The <em><span class="property">"acceptedTypes"</span></em> attribute specifies "jpg",
            "jpeg" as the permitted file types you can upload.
        </p>
        <p>
            The <em><span class="property">"fileUploadListener"</span></em> attribute represents
            the action listener method
            <code class="code">listener()</code>
            of the
            <code class="code">FileUploadManager</code>
            class that is notified after file is uploaded. This method makes the main job on the upload:
        </p>
        <pre class="brush: java, gutter: false">
            public void listener(FileUploadEvent event) {
                if (user == null) {
                    return;
                }
                UploadedFile file = event.getUploadedFile();
                uploadFile(new FileHandler(file), model.getSelectedAlbum());
            }
        
            public void uploadFile(FileHandler fileHandler, Album album) {
                Image image = constructImage(fileHandler);
                try {
                    extractMetadata(fileHandler, image);
                } catch (Exception e1) {
                    addError(fileHandler, image, Constants.FILE_PROCESSING_ERROR);
                    return;
                }
        
                image.setAlbum(album);
                if (image.getAlbum() == null) {
                    addError(fileHandler, image, Constants.NO_ALBUM_TO_DOWNLOAD_ERROR);
                    return;
                }
                try {
                    if (imageAction.isImageWithThisPathExist(image.getAlbum(), image.getPath())) {
                        String newPath = generateNewPath(image);
                        image.setPath(newPath);
                        image.setName(newPath);
                    }
                    imageAction.addImage(image);
                } catch (Exception e) {
                    addError(fileHandler, image, Constants.IMAGE_SAVING_ERROR);
                    return;
                }
                try {
                    if (!fileManager.addImage(image.getFullPath(), fileHandler)) {
                        addError(fileHandler, image, Constants.FILE_SAVE_ERROR);
                        return;
                    }
                } catch (IOException ioe) {
                    log.log(Level.INFO, &quot;error&quot;, ioe);
                    addError(image, Constants.FILE_SAVE_ERROR + &quot; - &quot; + ioe.getMessage());
                }
        
                fileWrapper.setComplete(false);
                fileWrapper.getFiles().add(image);
                imageEvent.fire(new ImageEvent(image));
                try {
                    fileHandler.delete();
                } catch (IOException ioe) {
                    log.log(Level.INFO, &quot;error&quot;, ioe);
                    addError(image, &quot;Error deleting file - &quot; + ioe.getMessage());
                }
            }
        </pre>
        <p>
            The
            <code class="code">uploadFile()</code>
            method creates an
            <code class="code">Image</code>
            object and extracts all image metadata such as Camera name, Image size, etc. It performs scaling of an image and
            saves six different image's dimensions in order to create thumbnails. After that the photo is added into the
            database the temporary file is removed.
        </p>
        <p>Visit following pages at RichFaces Showcase for more information, examples and sources on the components used in
            the application and described in this chapter:</p>
        <div class="itemizedlist">
            <ul>
                <li>
                    <p>
                        <a target="_blank" xmlns:xlink="http://www.w3.org/1999/xlink"
                            href="http://showcase.richfaces.org/richfaces/component-sample.jsf?demo=fileUpload">FileUpload</a>
                        page for the <strong><span class="property">&lt;rich:fileUpload&gt;</span></strong>
                        component;
                    </p>
                </li>
                <li>
                    <p>
                        <a target="_blank" xmlns:xlink="http://www.w3.org/1999/xlink"
                            href="http://showcase.richfaces.org/richfaces/component-sample.jsf?demo=ajax">Ajax</a> for
                        the <strong><span class="property">&lt;a4j:ajax&gt;</span></strong>
                        component.
                    </p>
                </li>
            </ul>
        </div>
    </div>

</ui:composition>