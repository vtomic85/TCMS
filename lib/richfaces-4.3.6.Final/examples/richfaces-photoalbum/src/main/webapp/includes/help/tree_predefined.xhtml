<!--
  JBoss, Home of Professional Open Source
  Copyright 2013, Red Hat, Inc. and individual contributors
  by the @authors tag. See the copyright.txt in the distribution for a
  full listing of individual contributors.

  This is free software; you can redistribute it and/or modify it
  under the terms of the GNU Lesser General Public License as
  published by the Free Software Foundation; either version 2.1 of
  the License, or (at your option) any later version.

  This software is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this software; if not, write to the Free
  Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
  02110-1301 USA, or see the FSF site: http://www.fsf.org.
  -->

<ui:composition xmlns="http://www.w3.org/1999/xhtml" xmlns:ui="http://java.sun.com/jsf/facelets"
    xmlns:h="http://java.sun.com/jsf/html" xmlns:f="http://java.sun.com/jsf/core" xmlns:a4j="http://richfaces.org/a4j"
    xmlns:rich="http://richfaces.org/rich">

    <div class="section" lang="en-US">
        <div class="titlepage">
            <div>
                <div>
                    <h2 class="title">Navigation tree with public album groups.</h2>
                </div>
            </div>
        </div>
        <p>
            The <strong><span class="property">&lt;rich:tree&gt;</span></strong> component takes one
            of the main places in the <span class="property">Photo Album</span> and is tightly bounded with the application
            logic. It helps to represent and implement inherently the "Album Groups - Albums" hierarchy. Shelf is the highest
            possible level in the tree hierarchy, that is used to group thematic albums and may contain as many albums as
            needed.
        </p>
        <p>There are two types of navigation tree in the application: for a registered user and for a guest. The difference
            between them is that the first one has a context menu and drag-and-drop possibility.</p>
        <div class="section" lang="en-US">
            <div class="titlepage">
                <div>
                    <div>
                        <h3 class="title">Navigation tree for a guest</h3>
                    </div>
                </div>
            </div>
            <p>
                Navigation tree for a guest is represented as a simple <span class="bold"><strong><span
                        class="property">&lt;rich:tree&gt;</span></strong></span> component.
            </p>
            <p>
                There are several ways to implement the <strong><span class="property">&lt;rich:tree&gt;</span></strong>
                on a page. In the current application the <strong><span class="property">&lt;rich:tree&gt;</span></strong>
                is designed using a model tag <strong><span class="property">&lt;rich:treeNodesAdaptor&gt;</span></strong>.
            </p>
            <p>
                The <strong><span class="property">&lt;rich:treeModelAdaptor&gt;</span></strong>
                component has a <em><span class="property">"nodes"</span></em> attribute that
                accepts a collection of elements, so <strong><span class="property">&lt;rich:treeModelAdaptor&gt;</span></strong>
                iterates over the collection and renders a hierarchical tree structure on a page.
            </p>
            <p>
                According to the "Album Groups - Albums" hierarchy we need two nested <span class="bold"><strong><span
                        class="property">&lt;rich:treeModelAdaptor&gt;</span></strong></span> components. The first one iterates over the
                AlbumGroups collection that is returned from the
                <code class="code">getPredefinedShelves()</code>
                method of
                <code class="code">ShelfManager.java</code>
                class:
            </p>
            <pre class="brush: java, gutter: false">
                public List&lt;Shelf&gt; getPredefinedShelves() {
                    if (shelves == null) {
                        shelves = shelfAction.getPredefinedShelves();
                    }
                    return shelves;
                }
            </pre>
            <p>
                The second <strong><span class="property">&lt;rich:treeModelAdaptor&gt;</span></strong>
                component iterates over the Albums collection of the current Album Group which is available via <em><span
                        class="property">"var"</span></em> attribute of <span class="bold"><strong><span
                        class="property">&lt;rich:tree&gt;</span></strong></span>. The <em><span
                        class="property">"var"</span></em> attribute is used to get access to the data object of the current
                collection element Album Group, so it is possible to output any necessary data. Let's see the
                <code class="code">src/main/webapp/includes/index/tree.xhtml</code>
                file:
            </p>
            <pre class="brush: xml, gutter: false">
            &lt;rich:tree ajaxSubmitSelection=&quot;false&quot; id=&quot;PreDefinedTree&quot; var=&quot;treeNode&quot; toggleType=&quot;client&quot;&gt;
              &lt;rich:treeModelAdaptor nodes=&quot;#{'#{'}shelfManager.predefinedShelves}&quot;&gt;
                &lt;rich:treeNode style=&quot;cursor:pointer&quot; selectedClass=&quot;tree-selected-node&quot;
                    iconCollapsed=&quot;resources/img/shell/tree_icon_shelf.png&quot; iconExpanded=&quot;resources/img/shell/tree_icon_shelf.png&quot;&gt;
                  &lt;a4j:outputPanel layout=&quot;block&quot; style=&quot;cursor:pointer;width:200px; overflow-x:hidden;&quot;&gt;
                    &lt;h:outputText value=&quot;#{'#{'}treeNode.name}&quot; /&gt;
                    &lt;h:outputText rendered=&quot;#{'#{'}fn:length(treeNode.unvisitedImages) &gt; 0}&quot; value=&quot; #{'#{'}messages['delimiter']} &quot; /&gt;
                    &lt;h:outputText rendered=&quot;#{'#{'}fn:length(treeNode.unvisitedImages) &gt; 0}&quot; styleClass=&quot;bold&quot;
                        value=&quot;#{'#{'}fn:length(treeNode.unvisitedImages)}&quot; /&gt;
                    &lt;h:outputText rendered=&quot;#{'#{'}fn:length(treeNode.unvisitedImages) &gt; 0}&quot; value=&quot; #{'#{'}messages['new']}&quot; /&gt;
                    &lt;a4j:ajax render=&quot;treePanel, mainArea&quot; event=&quot;click&quot; listener=&quot;#{'#{'}controller.showShelf(treeNode)}&quot; /&gt;
                            
                    &lt;rich:tooltip direction=&quot;topRight&quot; showDelay=&quot;1000&quot;&gt;
                      &lt;span style=&quot;white-space: nowrap&quot;&gt;#{'#{'}treeNode.name}&lt;/span&gt;
                    &lt;/rich:tooltip&gt;
                            
                  &lt;/a4j:outputPanel&gt;
                &lt;/rich:treeNode&gt;
    
                &lt;rich:treeModelAdaptor var=&quot;album&quot; nodes=&quot;#{'#{'}treeNode.albums}&quot;&gt;
                  &lt;rich:treeNode style=&quot;cursor:pointer&quot; selectedClass=&quot;tree-selected-node&quot;
                      iconLeaf=&quot;resources/img/shell/tree_icon_album.png&quot;&gt;
                    &lt;a4j:outputPanel layout=&quot;block&quot; style=&quot;cursor:pointer;width:200px; overflow-x:hidden;&quot;&gt;
                      &lt;h:outputText value=&quot;#{'#{'}treeNode.name}&quot; /&gt;
                        &lt;h:outputText rendered=&quot;#{'#{'}fn:length(treeNode.unvisitedImages) &gt; 0}&quot; value=&quot; #{'#{'}messages['delimiter']} &quot; /&gt;
                      &lt;h:outputText rendered=&quot;#{'#{'}fn:length(treeNode.unvisitedImages) &gt; 0}&quot; styleClass=&quot;bold&quot;
                          value=&quot;#{'#{'}fn:length(treeNode.unvisitedImages)}&quot; /&gt;
                      &lt;h:outputText rendered=&quot;#{'#{'}fn:length(treeNode.unvisitedImages) &gt; 0}&quot; value=&quot; #{'#{'}messages['new']}&quot; /&gt;
                      &lt;a4j:ajax render=&quot;treePanel, mainArea&quot; event=&quot;click&quot; listener=&quot;#{'#{'}controller.showAlbum(treeNode)}&quot; /&gt;
                              
                      &lt;rich:tooltip direction=&quot;topRight&quot; showDelay=&quot;1000&quot;&gt;
                        &lt;span style=&quot;white-space: nowrap&quot;&gt;#{'#{'}treeNode.name}&lt;/span&gt;
                      &lt;/rich:tooltip&gt;
                               
                    &lt;/a4j:outputPanel&gt;
                  &lt;/rich:treeNode&gt;
    
                &lt;/rich:treeModelAdaptor&gt;
              &lt;/rich:treeModelAdaptor&gt;
    
            &lt;/rich:tree&gt;  
            </pre>
            <p>The image below shows how the navigation tree for a guest is rendered on the page.</p>
            <div class="figure">
                <div class="figure-contents">
                    <div class="mediaobject">
                        <img src="resources/img/help/tree.png"
                            alt="Album Groups and albums nodes rendered with the help of the &lt;rich:treeNodesAdaptor&gt;" />
                    </div>
                </div>
                <p class="title">
                    <b>Album Groups and albums nodes rendered with the help of the &lt;rich:treeNodesAdaptor&gt;</b>
                </p>
            </div>
            <br class="figure-break" />
        </div>

    </div>
</ui:composition>